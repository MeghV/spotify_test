{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nvar fetch = require('isomorphic-fetch'); // this file is an API endpoint that lives on the serverside\n//      - Next.js (which is rendering this app) gives us the serverside\n//        functionality for everything that's in the api/ folder\n\n\nvar client_id = 'eedd5a8f871641318cf5d8de7d0119e6'; // Your client id\n\nvar client_secret = '8237fdbfb34146189b6c23ab77ca06be'; // Your secret\n// Async function used here so we can use the \"await\" \n// syntax when making a request\n\nexport default function getToken(_x, _x2) {\n  return _getToken.apply(this, arguments);\n}\n\nfunction _getToken() {\n  _getToken = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(req, res) {\n    var tokenParams, searchParams, r, accessToken;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            tokenParams = {\n              grant_type: 'client_credentials' // puts token into this format:\n              //  url.com/?grant_type=client_credentials\n              // which is called form-urlencoded format (the data is encoded in the URL)\n\n            };\n            searchParams = _Object$keys(tokenParams).map(function (key) {\n              return encodeURIComponent(key) + '=' + encodeURIComponent(tokenParams[key]);\n            }).join('&');\n            _context.next = 5;\n            return fetch('https://accounts.spotify.com/api/token', {\n              method: 'POST',\n              headers: {\n                'Authorization': 'Basic ' + new Buffer(client_id + ':' + client_secret).toString('base64'),\n                'Content-Type': 'application/x-www-form-urlencoded'\n              },\n              body: searchParams\n            }) // you can still use .then() in an await, but the benefit is that it's cleaner to have everything in linear format\n            .then(function (response) {\n              return response.json();\n            });\n\n          case 5:\n            r = _context.sent;\n            console.log('tokenObject', r);\n            accessToken = r.access_token;\n            console.log('success getting token!');\n            return _context.abrupt(\"return\", res.status(200).send({\n              error: null,\n              data: accessToken\n            }));\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            console.log('error getting token', _context.t0);\n            return _context.abrupt(\"return\", res.status(400).send({\n              error: _context.t0,\n              data: null\n            }));\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 12]]);\n  }));\n  return _getToken.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/meghvakharia/Documents/scratch/searchandpresave_next/pages/api/getToken.js"],"names":["fetch","require","client_id","client_secret","getToken","req","res","tokenParams","grant_type","searchParams","map","key","encodeURIComponent","join","method","headers","Buffer","toString","body","then","response","json","r","console","log","accessToken","access_token","status","send","error","data"],"mappings":";;;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,kBAAD,CAArB,C,CAEA;AACA;AACA;;;AACA,IAAIC,SAAS,GAAG,kCAAhB,C,CAAoD;;AACpD,IAAIC,aAAa,GAAG,kCAApB,C,CAAwD;AAExD;AACA;;AACA,wBAA8BC,QAA9B;AAAA;AAAA;;;;;2BAAe,iBAAwBC,GAAxB,EAA6BC,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIDC,YAAAA,WAJC,GAIa;AAChBC,cAAAA,UAAU,EAAE,oBADI,CAIpB;AACA;AACA;;AANoB,aAJb;AAWDC,YAAAA,YAXC,GAWc,aAAYF,WAAZ,EAAyBG,GAAzB,CAA6B,UAACC,GAAD,EAAS;AACvD,qBAAOC,kBAAkB,CAACD,GAAD,CAAlB,GAA0B,GAA1B,GAAgCC,kBAAkB,CAACL,WAAW,CAACI,GAAD,CAAZ,CAAzD;AACH,aAFoB,EAElBE,IAFkB,CAEb,GAFa,CAXd;AAAA;AAAA,mBAeSb,KAAK,CAAC,wCAAD,EAA2C;AAC5Dc,cAAAA,MAAM,EAAE,MADoD;AAE5DC,cAAAA,OAAO,EAAE;AACL,iCAAiB,WAAY,IAAIC,MAAJ,CAAWd,SAAS,GAAG,GAAZ,GAAkBC,aAA7B,EAA4Cc,QAA5C,CAAqD,QAArD,CADxB;AAEL,gCAAgB;AAFX,eAFmD;AAM5DC,cAAAA,IAAI,EAAET;AANsD,aAA3C,CAAL,CAOb;AAPa,aAQXU,IARW,CAQN,UAAAC,QAAQ;AAAA,qBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,aARF,CAfT;;AAAA;AAeDC,YAAAA,CAfC;AAyBPC,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,CAA3B;AAEMG,YAAAA,WA3BC,GA2BaH,CAAC,CAACI,YA3Bf;AA6BPH,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AA7BO,6CA8BAlB,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,cAAAA,KAAK,EAAE,IADiB;AAExBC,cAAAA,IAAI,EAAEL;AAFkB,aAArB,CA9BA;;AAAA;AAAA;AAAA;AAmCPF,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAnCO,6CAoCAlB,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,cAAAA,KAAK,aADmB;AAExBC,cAAAA,IAAI,EAAE;AAFkB,aAArB,CApCA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["const fetch = require('isomorphic-fetch')\n\n// this file is an API endpoint that lives on the serverside\n//      - Next.js (which is rendering this app) gives us the serverside\n//        functionality for everything that's in the api/ folder\nvar client_id = 'eedd5a8f871641318cf5d8de7d0119e6'; // Your client id\nvar client_secret = '8237fdbfb34146189b6c23ab77ca06be'; // Your secret\n\n// Async function used here so we can use the \"await\" \n// syntax when making a request\nexport default async function getToken(req, res) {\n    // req.body will contain whatever you pass into the body: ... \n    // parameter of a POST fetch request\n    try {\n        const tokenParams = {\n            grant_type: 'client_credentials'\n        }\n\n        // puts token into this format:\n        //  url.com/?grant_type=client_credentials\n        // which is called form-urlencoded format (the data is encoded in the URL)\n        const searchParams = Object.keys(tokenParams).map((key) => {\n            return encodeURIComponent(key) + '=' + encodeURIComponent(tokenParams[key]);\n        }).join('&');\n\n        const r = await fetch('https://accounts.spotify.com/api/token', {\n            method: 'POST',\n            headers: {\n                'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64')),\n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            body: searchParams\n        }) // you can still use .then() in an await, but the benefit is that it's cleaner to have everything in linear format\n            .then(response => response.json())\n\n        console.log('tokenObject', r)\n\n        const accessToken = r.access_token\n\n        console.log('success getting token!')\n        return res.status(200).send({\n            error: null,\n            data: accessToken\n        })\n    } catch (e) {\n        console.log('error getting token', e)\n        return res.status(400).send({\n            error: e,\n            data: null\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}