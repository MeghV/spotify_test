{"version":3,"file":"static/webpack/static/development/pages/index.js.710ade2efeeba5b881b1.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component } from 'react';\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            query: \"\", // my query\n            artist: null  // my response.\n        }\n    }\n\n    // gotta put async here so we can use the \"await\" syntax\n    async search() {\n        // try / catch is eqivalent to:\n        // .then().catch() -> basically 'await' replaces .then, so you can\n        // pull data and take actions all in-line w/o having to put everything \n        // in deepending .then() statements \n\n        try {\n            // calling this on the server is necessary as Spotify'S API\n            // doesnt let you call it from localhost (the local browser running the app)\n            const spotifyToken = await fetch('/api/getToken')\n            console.log('got spotify token!', spotifyToken)\n            \n            \n\n        } catch (e) {\n            console.log('error!', e)\n        }\n\n        //console.log(json);\n\n        // var accessToken = '';\n\n        //var request = require(\"request\"); // \"Request\" library\n\n        /*\n            .then(json => {\n              console\n              const artist = json.artists.items[0];        \n              this.setState({ artist });\n            })*/\n        /*\n        request.post({\n          headers: {\n            'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n          },\n          url: 'https://accounts.spotify.com/api/token',//'https://accounts.spotify.com/api/token',\n          form: {\n            grant_type: 'client_credentials'\n          },\n          json: true,\n          mode: 'no-cors',\n          cache: 'default'\n        }, function(error, response, body) {\n          console.log('body', body);\n          console.log('response', response);\n          console.log('error', error);\n          if (!error && response.statusCode === 200) {\n            // use the access token to access the Spotify Web API\n            accessToken = body.access_token;\n            var options = {\n              url: 'https://api.spotify.com/v1/users/mbdogluver',\n              headers: {\n                'Authorization': 'Bearer ' + accessToken\n              },\n              json: true\n              //mode: 'cors',\n              //cache: 'default'\n            };\n            request.get(options, function(error, response, body) {\n              console.log(body);\n            });\n          }\n        })*/\n\n        /////\n\n        //var accessToken = token;\n\n        // var myOptions = {\n        //     method: 'GET',\n        //     headers: {\n        //         'Authorization': 'Bearer ' + accessToken\n        //     },\n        //     json: true,\n        //     //mode: 'no-cors',\n        //     cache: 'default'\n        // };\n\n        // console.log(FETCH_URL)\n\n        // fetch(FETCH_URL, myOptions)\n        //   .then(data => {\n        //     console.log(data.artists.items)\n        //     //this.setState({ artist });\n        //   })\n        //   .then(response => {\n        //     console.log(response);\n        //     response.json()\n        //     console.log(response.artists.items);\n        //   })\n        //   .catch(error => { console.log(error) })\n    }\n\n    render() {\n\n        let artist = {\n            name: '',\n            followers: {\n                total: ''\n            }\n        };\n        if (this.state.artist !== null) {\n            artist = this.state.artist;\n        }\n\n        return (\n            // return JSX \n            <div className=\"container\">\n                <hr />\n                <div className=\"col-lg-6\">\n                    <div className=\"input-group\">\n                        <input type=\"text\"\n                            onChange={event => { this.setState({ query: event.target.value }) }}\n                            className=\"form-control\" placeholder=\"Search for a song, artist, or playlist\" />\n                        <span className=\"input-group-btn\">\n                            <button\n                                onClick={() => this.search()}\n                                className=\"btn btn-default\" type=\"button\">Go!</button>\n                        </span>\n                    </div>\n                </div>\n                <hr />\n                <div>\n                    <div> {artist.name} </div>\n                    <div> {artist.followers.total} </div>\n                </div>\n\n\n            </div>\n        )\n    }\n}\nexport default App;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAHA;AAFA;AAMA;AACA;AACA;;;;;;;;;;;;;;AAUA;AACA;;AADA;AACA;;;;;;;AAKA;AACA;;;;;;;;;;;;;;;;;AA6EA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAnBA;AAyBA;;;;AA7IA;AACA;AA8IA;;;;A","sourceRoot":""}